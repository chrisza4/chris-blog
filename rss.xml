<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Chris' Dialogue]]></title><description><![CDATA[A blog of Chris, a human who love to learn more about himself and the world]]></description><link>https://gatsby-starter-blog-demo.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 09 Feb 2021 06:58:20 GMT</lastBuildDate><item><title><![CDATA[We don't need "more documentation"]]></title><description><![CDATA[There are many sentiments around code documentation. On the one side, some advocates for self-documented code, and another side advocate for…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/the-documentation/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/the-documentation/</guid><pubDate>Fri, 12 Feb 2021 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are many sentiments around code documentation. On the one side, some advocates for self-documented code, and another side advocate for more documentation.&lt;/p&gt;
&lt;p&gt;Truth be told, my main motivation toward writing this article is based a &lt;a href=&quot;https://www.reddit.com/r/programming/comments/le46br/why_you_need_architecturemd/&quot;&gt;Reddit’s Thread&lt;/a&gt;, esp this &lt;a href=&quot;https://www.reddit.com/r/programming/comments/le46br/why_you_need_architecturemd/gm9zut3?utm_source=share&amp;#x26;utm_medium=web2x&amp;#x26;context=3&quot;&gt;comment&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;In this article, I would like to show my thought on the topic. There are some rants I need to get off my chest.&lt;/p&gt;
&lt;h2&gt;Manager: merely more documentation does not help&lt;/h2&gt;
&lt;p&gt;I have so many thoughts about documentation. But if I have only one bullet to make a point: this will be it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many people working in the software industry assume documentation is easier to understand than a codebase. That assumption is not correct. Worst of all, it is not even close to the truth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When a manager landed into a challenging hand-off project. They wish for more documentation. Sometimes, they might force a developer to write documentation with a good intention of making future maintenance work easier.&lt;/p&gt;
&lt;p&gt;But let me ask a blunt question here. When you force a developer to rewrite a set of unambiguous logical instruction steps into an ambiguous language, human language, do you actually help your developers?&lt;/p&gt;
&lt;p&gt;Here is the metaphor. You have a Spanish novel. You ask an author to translate it into English. You sent it to a person who proficient in Both English and Spanish. Which version do you think they will prefer?&lt;/p&gt;
&lt;p&gt;In my experience, it almost always easier to reason within the code.&lt;/p&gt;
&lt;h2&gt;Developer: Ask for what you need&lt;/h2&gt;
&lt;p&gt;When a developer faced a complex legacy system, they wish for more documentation. They might start to blame the previous maintainer for the lack of documentation.&lt;/p&gt;
&lt;p&gt;They might start asking for documentation or even advocate for the whole company to produce more documentation.&lt;/p&gt;
&lt;p&gt;Now let me ask you a blunt question again.&lt;/p&gt;
&lt;p&gt;You have a person who struggles to express the logical steps in a well-structured, readable manner with the language designed for it. What makes you think that forcing this person to describe those logical steps again in a human language designed for ambiguous unstructured storytelling will make it easier to read?&lt;/p&gt;
&lt;p&gt;Turns out, this is a terrible idea.&lt;/p&gt;
&lt;p&gt;I found that most of the documentation produced by some policy or checkbox, which essentially forcing a developer to write in the virtue of “we need more documentation”, will be messier than the codebase itself.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Ironically, the one who can write good documentation will write code that does not require heavy documentation.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please, think carefully about what you really need.&lt;/p&gt;
&lt;p&gt;I understand how it feels to work in a legacy system. But asking for random documentation will not help.&lt;/p&gt;
&lt;p&gt;Because essentially, what we need is specific information, not the documentation. The core part is the information itself, and documentation is just one possible format.&lt;/p&gt;
&lt;p&gt;Understand what you really need. Don’t be reactionary. Just because you are working on a painful project and documentation does not exist there, it doesn’t mean you need more random documentation.&lt;/p&gt;
&lt;p&gt;I see many developers ranted about a customer giving them a solution, possibly a stupid one, rather than stating the problem. You know the type, the type who will tell you to implement some kind of Deep learning AI with Blockchain in his personal blog because all these fancy techs will magically solve his problem. You hate that guy, right?&lt;/p&gt;
&lt;p&gt;Don’t be that guy. Don’t ask for just more documentation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;State the problem, not the solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If that’s the mindset we want from our customers, we better set an example ourselves.&lt;/p&gt;
&lt;p&gt;Stop demanding more documentation, and start to ask for missing information.&lt;/p&gt;
&lt;h2&gt;Code is just a part of system documentation&lt;/h2&gt;
&lt;p&gt;Having all that said, I will not say that we should just write a self-documented code, and we will never need documentation again.&lt;/p&gt;
&lt;p&gt;Code cannot capture every useful information about the system.&lt;/p&gt;
&lt;p&gt;There are many aspects that you cannot express in the codebase. Here are some examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The intention. Why is the code writing this way? How do you want everything to be connected?&lt;/li&gt;
&lt;li&gt;The norm. It is better to read about the standard way of doing things in the documentation than reading through at least 51% of the codebase to deduce.&lt;/li&gt;
&lt;li&gt;Deployment process.&lt;/li&gt;
&lt;li&gt;Assumptions.&lt;/li&gt;
&lt;li&gt;Invisible constraint of the system.&lt;/li&gt;
&lt;li&gt;Overall architecture.&lt;/li&gt;
&lt;li&gt;Strategic architectural decisions that happened in the past.&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code cannot express these types of information. So whenever you document these, you bring some values.&lt;/p&gt;
&lt;p&gt;You can advocate for both documentation and self-documented code. That helps. Still, there are many things that code cannot express. Self-documented code is just a part of whole documentation.&lt;/p&gt;
&lt;h2&gt;Final Thought&lt;/h2&gt;
&lt;p&gt;This article is kind of a rant. Still, I believe we make the matter worst whenever we advocate for us to document more.&lt;/p&gt;
&lt;p&gt;So developer, stop asking for more documentation. Instead, understand what information do you really want and ask for that. Maybe it can come in the form of good old documentation. Perhaps it can come in a form of an executeable document (aka. code). Doesn’t matter.&lt;/p&gt;
&lt;p&gt;So manager, stop asking for more documentation. Instead, I gave you a list of many things that the codebase itself cannot express. Ask your developer to document those, not some kind of documentation.&lt;/p&gt;
&lt;p&gt;Also, a person who writes an unmaintainable codebase tends to write an also unmaintainable documentation. So don’t fall into a trap that more documentation always helps. Instead, it would be best to ask for validation with another developer.&lt;/p&gt;
&lt;p&gt;That’s all I have to rant. Thanks for reading.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Code to reflect of truth]]></title><description><![CDATA[Let say you are building an ERP application with a role-based authorization system. Let say we are building this for a company. In this…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/reflecting-the-knowledge/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/reflecting-the-knowledge/</guid><pubDate>Tue, 02 Feb 2021 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Let say you are building an ERP application with a role-based authorization system.&lt;/p&gt;
&lt;p&gt;Let say we are building this for a company. In this company, we have Jane. Jane is a long-time employee with a lot of influence. What she has to say is pretty important.&lt;/p&gt;
&lt;p&gt;After some sprints passed, she looked into our demonstration, and she wanted to hide a specific menu in the main menu screen, as it is not relevant to her workflow.&lt;/p&gt;
&lt;p&gt;Usually, the system would display a different set of menus for each role. So we considered if we should hide this menu for Jane’s role? In this case, the specific menu is relevant to every employee in Jane’s role, but not Jane (for some reason).&lt;/p&gt;
&lt;p&gt;After a long negotiation, we concluded that we need to work on Jane’s change request.&lt;/p&gt;
&lt;p&gt;Now, we might go with this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jane@thecompany.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;settingMenus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But wait, I can see some programmer scream at this line of code. We should not be hardcoding the stuff. It is a bad practice. Sloppy work!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now, if we get back to the requirement, what are the options to implement this?&lt;/p&gt;
&lt;p&gt;I can see three options.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a preference system where everyone can configure what they want to see in the main menu&lt;/li&gt;
&lt;li&gt;Make a specific role for Jane and hide the menu according to the role&lt;/li&gt;
&lt;li&gt;Hardcoding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And let’s evaluate each option:&lt;/p&gt;
&lt;p&gt;The first option seems to be overkill for just one person’s request. It will blow out the budget and timeline.&lt;/p&gt;
&lt;p&gt;In the second option, we create a role to conform to the current structure of the application. We might be able to create &lt;code class=&quot;language-text&quot;&gt;ACCOUTANT_BUT_FOR_JANE&lt;/code&gt;, which is another role. We can copy all the role configuration and permission from &lt;code class=&quot;language-text&quot;&gt;ACCOUNTANT&lt;/code&gt;. But then whenever the requirement for role &lt;code class=&quot;language-text&quot;&gt;ACCOUNTANT&lt;/code&gt; change, we need to make sure that &lt;code class=&quot;language-text&quot;&gt;ACCOUNTANT_BUT_FOR_JANE&lt;/code&gt; will be in sync and does not accidentally show Jane that disgusting menu.&lt;/p&gt;
&lt;p&gt;In the third option, it is simply a bad practice. Any good programmer should not be going around doing things the easy way and hardcoding stuff. They should implement everything in the right way.&lt;/p&gt;
&lt;p&gt;But is it? Is hardcoding is an easy sloppy way to implement this requirement?&lt;/p&gt;
&lt;p&gt;I would argue that since this request is a personal request from Jane herself, the hardcoding would reflect the truth in the most honest way.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jane@thecompany.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;settingMenus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code tells us that we hide this menu just for Jane. We don’t want to hide the menu because it appropriates some kind of new role &lt;code class=&quot;language-text&quot;&gt;ACCOUNTANT_BUT_NOT_JANE&lt;/code&gt; in the company that emerges from business need. It just simply Jane’s needs.&lt;/p&gt;
&lt;p&gt;It is a clear message to developers as well. If two years from now: Jane retired and &lt;code class=&quot;language-text&quot;&gt;jane@thecompany.com&lt;/code&gt; become reserved, this code will be dead, and we can simply remove the code.&lt;/p&gt;
&lt;p&gt;If we follow the unit test practices, we will even have a unit test:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShouldHideComplicatedSettingMenuForJane&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I think that when we code, reflecting the truth and nature of the requirement is way more important than conforming to the structure and “best practices”.&lt;/p&gt;
&lt;p&gt;It’s ok to leave the code but with some comment to explain the context. In this case, we hardcode it because it is Jane’s personal request, and she refuses to work with the system unless we hide the menu. We can put that into the comment.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Sometimes, we don’t be totally honest with the requirement. We want the code to looks good, looks consistence and have a well-defined structured. That is what good code look like.&lt;/p&gt;
&lt;p&gt;But somtimes, the truth is the requirement and human desired can be messy.&lt;/p&gt;
&lt;p&gt;And from what I see, many times developers (including me) hate this messiness and don’t want to make a code to reflect the messy reality. So we put some fancy stuff and abstraction over it.&lt;/p&gt;
&lt;p&gt;For example, We might disdain the practice of hardcoding to just “Jane” so we might put an abstraction over it to make it seems more likable, more consistent, better structured, etc. That structure can be some role, configuration, or whatsoever.&lt;/p&gt;
&lt;p&gt;I think those abstractions will blur the real truth and nature of the requirement. And make the system even harder to maintain. It reduce the quality of the code by acting as a sophicicated sheet to covered up the actual system requirement.&lt;/p&gt;
&lt;p&gt;I think we should be honest with the requirement. If it is Jane’s personal request, make it clear that it is her personal request. reflect it truthfully no matter how messy it is.&lt;/p&gt;
&lt;p&gt;And the truth shall set you free.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The software rewrite dilemma]]></title><description><![CDATA[Imagine this: You’ve been assigned to a legacy project. It does not have any tests. It used an ancient coding style or no consistent style…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/rewriting-dillema/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/rewriting-dillema/</guid><pubDate>Sun, 24 Jan 2021 05:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Imagine this: You’ve been assigned to a legacy project. It does not have any tests. It used an ancient coding style or no consistent style at all. Global variables are everywhere. Everything is such an incomprehensible mess.&lt;/p&gt;
&lt;p&gt;In this type of project, there is always someone who says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The whole thing is a mess and unmaintainable. We need to rewrite everything from scratch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I believe any seasoned software developer experienced this at some point in their career.&lt;/p&gt;
&lt;p&gt;And then, some of them are lucky enough to have a chance to start rewriting everything from scratch.&lt;/p&gt;
&lt;h2&gt;The ambitious rewrite project&lt;/h2&gt;
&lt;p&gt;After a while, many problems arises. The rewrite project has been ongoing for a year. There is no sign of an end at all.&lt;/p&gt;
&lt;p&gt;The business started to doubt the project. The engineering team started to say that requirement is not clear. The team started to reveal some hidden secret features in the current system that maybe only one or two customers use, but still, we must implement it. Worst of all, the new green-field architecture you designed was never meant to handle this type of feature.&lt;/p&gt;
&lt;p&gt;Deadline is looming, and you don’t even know how far are you from the finish line. How much effort do we need to put on until we can truly replace the old system? I don’t know, but everyone, please keep going.&lt;/p&gt;
&lt;p&gt;Many ambitious rewrite projects failed miserably. &lt;a href=&quot;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&quot;&gt;Joel Spolsky&lt;/a&gt; already wrote a great article about how this strategy has a strong tendency to failed.&lt;/p&gt;
&lt;p&gt;But contrast to this, in my career, I successfully rewrote two systems.&lt;/p&gt;
&lt;p&gt;The first system is the one I worked on for a while. I started that project by putting every business logic in stored procedures, and after a while, I realized that it becomes unmaintainable. So, I rewrote everything and move most of the business logic into the codebase.&lt;/p&gt;
&lt;p&gt;The second system, which I inherited, is very messy. I decided to rewrite the whole frontend and move it to another framework (and Angular 1 was still a thing).&lt;/p&gt;
&lt;p&gt;At the same time, I saw my friend had many failed stories to tell, both personally and sometimes in the article. So I start to think, what are the differences?&lt;/p&gt;
&lt;p&gt;And here is my assumption&lt;/p&gt;
&lt;h2&gt;The great dillema&lt;/h2&gt;
&lt;p&gt;Now, here’s the kicker:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“You need to be unfamiliar with the system to see the value of the rewrite. But you need to be very familiar with the system to successfully rewriting it.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What I see in most of the rewrite project looks like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A team of programmers started working on a legacy system.&lt;/li&gt;
&lt;li&gt;They found that the system is really hard to understand and hard to work with.&lt;/li&gt;
&lt;li&gt;They fed up with the legacy codebase. They give up on it. They start suggesting a rewrite.&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;The project fail to deliver or very lacklusting.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the main difference between those project and my experience is simply, &lt;strong&gt;I did not give up on the old codebase&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most of the time, this is step four.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;After the rewrite project was approved, programmers start to treat the legacy system as a black box. They refuse to touch it with a ten-foot pole. They only look into specs and build the new system accordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That is different from what I did. In my success rewrite, I never treat it at a black box.&lt;/p&gt;
&lt;p&gt;In the first project, I understand my messy stored procedures’ ins-and-outs, and it took me only a week and few days to move almost every business logic to the core code.&lt;/p&gt;
&lt;p&gt;The second project was a mess, and I have permission to rewrite it. I spent a great amount of time during the rewrite mapping out the relationship between the current messy front-end codebase and the features.&lt;/p&gt;
&lt;p&gt;At this point, I believe every successful rewrite required a significant level of understanding of the legacy system.&lt;/p&gt;
&lt;p&gt;Ironically, most programmers suggest the rewrite because they don’t want to work with the legacy system anymore. They want to be free from it. They don’t want to understand it.&lt;/p&gt;
&lt;p&gt;And that is the dilemma. Only one who brave enough to dig into legacy system, are the only one who capable of escaping.&lt;/p&gt;
&lt;h2&gt;Don’t avoid legacy code&lt;/h2&gt;
&lt;p&gt;I have one good news and one bad news.&lt;/p&gt;
&lt;p&gt;Good news: It is totally possible to rewrite the legacy system and make it much cleaner, smoother, and easier to work with. I did that before.&lt;/p&gt;
&lt;p&gt;Bad news: To succeed in the rewrite, you need to dig even deeper and get even closer to that legacy system you desperately want to avoid.&lt;/p&gt;
&lt;p&gt;In my experience: You can never trust a spec in a rewrite project. You need to look into the spec, map it with the current legacy code, see if there is any little tiny secret, and refine the specs accordingly.&lt;/p&gt;
&lt;p&gt;Sometimes those tiny little secrets can be throw away, sometimes not. You never know. But the only way to know is to lay it out. And the only way to lay it out is to become an expert in the legacy code.&lt;/p&gt;
&lt;p&gt;Then the dilemma might kick-in, because once you are familiar with and understand the legacy system’s ins-and-outs, you might not feel an urge to rewrite everything anymore.&lt;/p&gt;
&lt;p&gt;That is okay. If you still remember why do you want to rewrite the whole thing in the first place, then you will make a better-informed decision.&lt;/p&gt;
&lt;p&gt;Sometimes you might decide to rewrite only a few parts, and sometimes you might decide to refactor it just a little bit.&lt;/p&gt;
&lt;h2&gt;The hard truth&lt;/h2&gt;
&lt;p&gt;The real hard truth here is&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once you touch legacy code, there is no escape&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to move away from those messy, ugly, incomprehensible dirty code, you want to create a rewrite, then the faster you dig into it, the quicker you will move away.&lt;/p&gt;
&lt;p&gt;I repeat: There is no escape.&lt;/p&gt;
&lt;p&gt;Sometimes developers use the rewrite as an escape hatch. They don’t want to touch those ugly, incomprehensible dirty codes. They cannot maintain it effectively, so they want to rewrite it.&lt;/p&gt;
&lt;p&gt;And I sympathize with that sentiment. I understand how it feels.&lt;/p&gt;
&lt;p&gt;But still, I repeat: There is no escape.&lt;/p&gt;
&lt;p&gt;Using the rewrite project as an escape mechanism will never end well.&lt;/p&gt;
&lt;p&gt;I found that there are only two types of rewrite success story:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rewrite with full Rebrand of product, such as &lt;a href=&quot;https://medium.com/@herbcaudill/lessons-from-6-software-rewrite-stories-635e4c8f7c22&quot;&gt;Basecamp, VSCode&lt;/a&gt; and Windows 10. That required business decision to drop some of backward compatibility and whole marketing effort to rebrand as a new software package.&lt;/li&gt;
&lt;li&gt;Rewrite from the experience of legacy code. You start writing specs. Then you map all observable features to the legacy code. You read through all that to uncover all little secrets there. Then you define true specs. Only from that you can start a rewrite.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you don’t have the liberty to go with the first choice, I repeat again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once you touch legacy code, there is no escape&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sooner you accept this statement into your heart, the quicker you can get away from legacy code.&lt;/p&gt;
&lt;p&gt;It works for me. As I started to submit myself to the fact that I need to read and understand legacy code, ironically, I began to get more and more opportunities to rewrite, refactor and eventually get away from it.&lt;/p&gt;
&lt;p&gt;The world is pretty ironic, and thanks for reading.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My favorite blogs]]></title><description><![CDATA[These are some of the blogs I enjoy. I will share it here. Tradable Quality Hypothesis Martin Fowler put good content on why we might…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/favorite-contents/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/favorite-contents/</guid><pubDate>Sat, 23 Jan 2021 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;These are some of the blogs I enjoy. I will share it here.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://martinfowler.com/bliki/TradableQualityHypothesis.html&quot;&gt;Tradable Quality Hypothesis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Martin Fowler put good content on why we might wrongly perceive internal quality and design as trade-offs for cheaper development. I agree that just like how we can buy a lower quality phone for lower prices, we can make a lower external quality software (eg. Non-performance critical. Non-optimal user interface) for the sake of lowering budget. However, it will be different story when it comes to internal quality.&lt;/p&gt;
&lt;p&gt;I am not saying that we must over-engineer everything we build. I think we need to be aware that buying cheaper mobile with fewer features and buying ill design software for a cheaper budget, let it be time or money, is not comparable in many ways.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/bliki/TradableQualityHypothesis.html&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://medium.com/javascript-scene/the-forgotten-history-of-oop-88d71b9b2d9f&quot;&gt;The Forgotten History of OOP&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eric Elliot is one of the functional programming advocates. He wrote a great article about what OOP was initially supposed to be. This article is great content that captures the original idea of OOP.&lt;/p&gt;
&lt;p&gt;I am not a person who always advocates for any “Original stuff”. I firmly believe that, in general, the extended version of anything will be better than the original version. But in the OOP case, I agree with Alan Kay that the real value of the Object-oriented paradigm comes from multiple subsystems communicate via message instead of shared memory. Our industry emphasizes design pattern, base classes, and inheritance tree shy us away from the deep and real merit of OOP design.&lt;/p&gt;
&lt;p&gt;It does provide value to a certain degree. But if we apply Pareto’s 80/20 rules here, I would say inheritance and base class design provides the 20% side.&lt;/p&gt;
&lt;p&gt;I should write on this more sometimes. I touch the surface of this topic in the article &lt;a href=&quot;https://dev.to/chrisza4/composition-over-inheritance-1ojg&quot;&gt;Composition over Inheritance&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[SOLID Javascript without Classes]]></title><description><![CDATA[I gave a talk in Javascript Bangkok. It is about how you can use SOLID principle in Javascript without classes and objects. My main…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/js-without-classes/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/js-without-classes/</guid><pubDate>Thu, 14 Jan 2021 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I gave a talk in &lt;a href=&quot;https://javascriptbangkok.com/&quot;&gt;Javascript Bangkok&lt;/a&gt;. It is about how you can use SOLID principle in Javascript without classes and objects.&lt;/p&gt;
&lt;p&gt;My main motivation is to show the root of SOLID. I believe we can gain deeper understanding of what is an essence of SOLID and what is just simply an implementation, by looking at another manifestation of SOLID principle.&lt;/p&gt;
&lt;p&gt;Looking back, I still love the content, but I could work more on presentation esp. the tone of voice and body language.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.49999999999999%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;div class=&quot;embedVideo-container&quot;&gt; &lt;iframe title=&quot;&quot; src=&quot;https://www.youtube.com/embed/R3fv__odSbI?rel=0&quot; class=&quot;embedVideo-iframe&quot; style=&quot;border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Feedback are welcomed in &lt;a href=&quot;mailto:chakrit.lj@gmail.com&quot;&gt;email&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Why I blog here.]]></title><description><![CDATA[Hi. I have been blogging in both Medium and dev.to for a really long time. It’s time for me to try hosting my own blog, so here it is. Here…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/new-beginnings/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/new-beginnings/</guid><pubDate>Tue, 12 Jan 2021 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi. I have been blogging in both &lt;a href=&quot;https://medium.com/@chrisza&quot;&gt;Medium&lt;/a&gt; and &lt;a href=&quot;https://dev.to/chrisza4&quot;&gt;dev.to&lt;/a&gt; for a really long time.&lt;/p&gt;
&lt;p&gt;It’s time for me to try hosting my own blog, so here it is.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https://github.com/chrisza4/chris-blog&quot;&gt;source code of this blog&lt;/a&gt;. I wrote a scraper for some content platform that I put a content into, so you can use those as an inspiration or prototype.&lt;/p&gt;</content:encoded></item></channel></rss>