{"componentChunkName":"component---src-templates-blog-post-js","path":"/crud-or-not/","result":{"data":{"site":{"siteMetadata":{"title":"Chris' Dialogue"}},"markdownRemark":{"id":"a1c9d3d6-d6a5-5d43-a5ef-b76d09e6bc43","excerpt":"Every app is just a glorified CRUD app with extra steps. There are a lot of debates happening in the dev community between using complex architecture (such as…","html":"<p>Every app is just a glorified CRUD app with extra steps.</p>\n<p>There are a lot of debates happening in the dev community between using complex architecture (such as CQRS) and viewing everything as a CRUD.</p>\n<p>I want to clarify when CRUD is simple enough for the job, and when it is not.</p>\n<p>Let say you want to create an accounting system. You have an invoice. Invoice can be created, read, updated and deleted.</p>\n<p>Sounds like a CRUD app.</p>\n<p>So you start with a simple Rails-style framework with REST-style API surface, where everything is just a resource that can be CRUDed.</p>\n<p>The code can look like this (simplified version)</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update</span></span>\n  invoice <span class=\"token operator\">=</span> Invoice<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  invoice<span class=\"token punctuation\">.</span>update_by<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  invoice<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h1>Fit everything to CRUD</h1>\n<p>Let say that your invoice can be approved. You added <code class=\"language-text\">status</code> field to the model. The status can be <code class=\"language-text\">Draft</code>, <code class=\"language-text\">Confirmed</code>, <code class=\"language-text\">Approved</code>, <code class=\"language-text\">Commented</code> and <code class=\"language-text\">Rejected</code>.</p>\n<p>And then you some business requirement</p>\n<ol>\n<li>When an invoice is approved, send a notification to someone so they can proceed to pay.</li>\n<li>When an invoice is commented or rejected, send a notification to the creator so they can be revised.</li>\n<li>When a confirmed invoice has a total of more than 100,000 USD, send a notification to the director level.</li>\n</ol>\n<p>If we still model by CRUD, we need a code that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update</span></span>\n  invoice <span class=\"token operator\">=</span> Invoice<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  old_status <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>status\n  invoice<span class=\"token punctuation\">.</span>update_by<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  invoice<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  new_status <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>status\n\n  <span class=\"token comment\"># Send notification to payment department if status changed to approved</span>\n  <span class=\"token keyword\">if</span> old_status <span class=\"token operator\">!=</span> <span class=\"token symbol\">:Approved</span> <span class=\"token keyword\">and</span> new_status <span class=\"token operator\">==</span> <span class=\"token symbol\">:Approved</span>\n    Notification<span class=\"token punctuation\">.</span>send_to<span class=\"token punctuation\">(</span><span class=\"token symbol\">:payment_department</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># Send notification to invoice owner if invoice was commented or rejected</span>\n  <span class=\"token keyword\">if</span> old_status <span class=\"token operator\">==</span> <span class=\"token symbol\">:Confirmed</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">[</span><span class=\"token symbol\">:Commented</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:Rejected</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>included<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>new_status<span class=\"token punctuation\">)</span>\n    Notification<span class=\"token punctuation\">.</span>send_to<span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token comment\"># Send notification to management board if invoice exceed particular amount</span>\n  <span class=\"token keyword\">if</span> old_status <span class=\"token operator\">==</span> <span class=\"token symbol\">:Draft</span> <span class=\"token keyword\">and</span> new_status <span class=\"token operator\">==</span> <span class=\"token symbol\">:Confirmed</span> <span class=\"token keyword\">and</span> invoice<span class=\"token punctuation\">.</span>total <span class=\"token operator\">></span> <span class=\"token number\">100000</span>\n    Notification<span class=\"token punctuation\">.</span>send_to<span class=\"token punctuation\">(</span><span class=\"token symbol\">:C_level</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>So now we can generalize everything as CRUD.</p>\n<p>Six months later, we want to add functionality to the invoice approval step.</p>\n<ol>\n<li>We want to ensure that any invoice exceeding 100,000 USD must be approved by someone with a proper level of authorization</li>\n<li>We want to lock any invoice that has been rejected more than 3 times.</li>\n</ol>\n<p>If we wrote code as CRUD, to implement these requirements you must:</p>\n<ol>\n<li>Carefully read through update hoops and see which line is related to which.</li>\n<li>If 2 programmers work in parallel, they might need to resolve to merge conflict.</li>\n</ol>\n<h1>Use business intent</h1>\n<p>Another type of implementation is to put a business intent into our model.</p>\n<p>Instead of update, we have these:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">approve</span></span>\n  invoice <span class=\"token operator\">=</span> Invoice<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  invoice<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token symbol\">:Approved</span>\n  invoice<span class=\"token punctuation\">.</span>save\n  Notification<span class=\"token punctuation\">.</span>send_to<span class=\"token punctuation\">(</span><span class=\"token symbol\">:payment_department</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">reject</span></span>\n  invoice <span class=\"token operator\">=</span> Invoice<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  invoice<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token symbol\">:Reject</span>\n  invoice<span class=\"token punctuation\">.</span>save\n  Notification<span class=\"token punctuation\">.</span>send_to<span class=\"token punctuation\">(</span><span class=\"token symbol\">:invoice</span><span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># And so-on</span></code></pre></div>\n<p>Instead of translating business intention such as approve to be like: approval is just an update with extra steps. We instead embedded business intention directly into our method.</p>\n<p>When the business what to modify the approval process, we can search for <code class=\"language-text\">approve</code> method.\nWhen the business what to modify the confirmation process, we can search for <code class=\"language-text\">confirm</code> method.</p>\n<p>Even if this contains more code, it’s become easier to modify and reason about.</p>\n<p>This is the power of moving away from CRUD based modelling.</p>\n<h1>It’s not black and white</h1>\n<p>CRUD is a simple model. There are only four concepts and it can handle almost every requirement imaginable.</p>\n<p>Everything can be viewed as “CRUD with extra steps”. Even network communication can be viewed as “CRUD of network packet with extra steps”.</p>\n<p>It is a simple and powerful model. But it has its own limitation.</p>\n<p>CRUD based method works well until collaboration break.</p>\n<p>You can fit nearly every app into the CRUD model, but at what cost?</p>\n<p>The question is here is not can you, it’s should you.</p>\n<p>If your software grows based on some particular business process, such as if your accounting module is famous for a world-class approval system, it’s worth you putting a highlight to those business intent rather than generalize it to “just CRUD with extra steps”.</p>\n<p>I don’t have a clear line between when to model the app as CRUD and when to do the domain event-based app.</p>\n<p>But I know that if communication starts to break down. If a requirement needs 2 days of dev assessment just to translate the requirement into codebase modelling, check where to change, what is the impact.</p>\n<p>Your model might not be sufficient.</p>\n<p>And that’s when you might need to move on from the simple CRUD model.</p>","frontmatter":{"title":"CRUD is simple until it's not","date":"January 16, 2022","description":null}},"previous":{"fields":{"slug":"/dependency-inversion-injection/"},"frontmatter":{"title":"Common misconception of dependency inversion"}},"next":{"fields":{"slug":"/tdd-misconception/"},"frontmatter":{"title":"TDD Misconception: You can write some design code before test"}}},"pageContext":{"id":"a1c9d3d6-d6a5-5d43-a5ef-b76d09e6bc43","previousPostId":"b56108e5-627a-59bb-811e-5878d706f503","nextPostId":"c75c125d-c190-5c9e-af4b-bdb47b870194"}},"staticQueryHashes":["1033745147","2841359383"],"slicesMap":{}}