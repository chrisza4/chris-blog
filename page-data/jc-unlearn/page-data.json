{"componentChunkName":"component---src-templates-blog-post-js","path":"/jc-unlearn/","result":{"data":{"site":{"siteMetadata":{"title":"Chris' Dialogue"}},"markdownRemark":{"id":"c33c8f4d-5fd1-5bed-8d91-cf087cd441e7","excerpt":"Java and C# are very famous for being good programming languages for enterprise work. It’s pretty stable. Patterns and practices are known and well-established…","html":"<p>Java and C# are very famous for being good programming languages for enterprise work. It’s pretty stable. Patterns and practices are known and well-established. They are <a href=\"https://boringtechnology.club/\">good boring technology</a> that works.</p>\n<p>However, since the community and developer of these languages usually work in enterprise development. Enterprise love having a standard. Enterprise love having design patterns. Enterprise love having best practices. In Java and C# world, there are established patterns and best practices for almost everything. Many developers are rigidly thought that there is only one single best way to achieve something, and every alternative is undesirable. This belief is embedded in the culture of the community.</p>\n<p>For the sake of future reference, I will call these developer JC developer.</p>\n<p>That culture well in the enterprise environment. It’s not good to have every single developer invent their own pattern and make every part of a big codebase become weirdly unique.</p>\n<p>However, I found many JC developers struggle to learn a new programming language.</p>\n<p>Other programming languages such as Go, Elixir, Python, Javascript, TypeScript, Clojure, Ruby, Scala or Rust have a different style, semantic and idiomatic which looks and feels different from JC. I’ve seen many\nJC developers try to force JC-ish code into other programming languages and it usually does not end well.</p>\n<p>There are many patterns, best practices and beliefs that JC developer should let go of while learning other programming language. I’m here to talk about it.</p>\n<h2>Dependency Injection (or IoC container) isn’t always necessary to make code testable</h2>\n<p>This is the most common one. JC developer usually asked where is dependency injection and where is IoC container that I can config dependencies.</p>\n<p>In many programming language, you don’t need IoC container in order to switch between test double and actual code.</p>\n<p>Assuming you have to call <code class=\"language-text\">PaymentGateway</code> to pay for things. If the result is success, you need to save some data in response into transaction database.</p>\n<p>In Ruby, you can just switch test and code using <code class=\"language-text\">Mocha</code>. The language allow us to do a simple monkey patching. Here are some examples.</p>\n<p>Ruby</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pay</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">pay</span></span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> <span class=\"token class-name\">PaymentService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span>\n    transaction <span class=\"token operator\">=</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n    transaction<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:amount</span><span class=\"token punctuation\">]</span>\n    transaction<span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:ref</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">raise</span> <span class=\"token string-literal\"><span class=\"token string\">'Cannot save'</span></span> <span class=\"token keyword\">unless</span> transaction<span class=\"token punctuation\">.</span>save\n\n    transaction\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PayTest</span> <span class=\"token operator\">&lt;</span> ActiveSupport<span class=\"token double-colon punctuation\">::</span>TestCase\n  test <span class=\"token string-literal\"><span class=\"token string\">'pay when success'</span></span> <span class=\"token keyword\">do</span>\n    payment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span>\n    Transaction<span class=\"token punctuation\">.</span>any_instance<span class=\"token punctuation\">.</span>stubs<span class=\"token punctuation\">(</span><span class=\"token symbol\">:save</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    PaymentService<span class=\"token punctuation\">.</span>any_instance<span class=\"token punctuation\">.</span>expects<span class=\"token punctuation\">(</span><span class=\"token symbol\">:pay</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with<span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token symbol\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">ref</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'super'</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    t <span class=\"token operator\">=</span> <span class=\"token class-name\">Pay</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span>\n    assert_equal <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>amount\n    assert_equal <span class=\"token string-literal\"><span class=\"token string\">'super'</span></span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ref\n  <span class=\"token keyword\">end</span>\n\n  test <span class=\"token string-literal\"><span class=\"token string\">'raise when pay failed'</span></span> <span class=\"token keyword\">do</span>\n    Transaction<span class=\"token punctuation\">.</span>any_instance<span class=\"token punctuation\">.</span>stubs<span class=\"token punctuation\">(</span><span class=\"token symbol\">:save</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    PaymentService<span class=\"token punctuation\">.</span>any_instance<span class=\"token punctuation\">.</span>stubs<span class=\"token punctuation\">(</span><span class=\"token symbol\">:pay</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token symbol\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">ref</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'super'</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    exception <span class=\"token operator\">=</span> assert_raise<span class=\"token punctuation\">(</span>StandardError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token class-name\">Pay</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token symbol\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    assert_equal <span class=\"token string-literal\"><span class=\"token string\">'Cannot save'</span></span><span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">.</span>message\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In Ruby, even though class <code class=\"language-text\">Pay</code> require <code class=\"language-text\">PaymentService</code> object to connect to payment gateway and <code class=\"language-text\">Transaction</code> object to connect to database. We don’t really need dependency injection or IoC container in order to make this code testable. Ruby allows us to simply say: For every transaction instance, <code class=\"language-text\">save</code> will return true and <code class=\"language-text\">PaymentService</code> will return our particular result without connecting to an actual third-party.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">Transaction<span class=\"token punctuation\">.</span>any_instance<span class=\"token punctuation\">.</span>stubs<span class=\"token punctuation\">(</span><span class=\"token symbol\">:save</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nPaymentService<span class=\"token punctuation\">.</span>any_instance<span class=\"token punctuation\">.</span>expects<span class=\"token punctuation\">(</span><span class=\"token symbol\">:pay</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with<span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token symbol\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">ref</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'super'</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Javascript/TypeScript also have same monkey-patch approach. But since class isn’t even necessary, we can even reduce <code class=\"language-text\">PaymentService</code> and <code class=\"language-text\">Transaction</code> to be mere functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Implementation</span>\n<span class=\"token keyword\">const</span> transaction <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./transaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> paymentService <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./paymentService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> paymentService<span class=\"token punctuation\">.</span><span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> newTransaction <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newTransaction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot save\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newTransaction<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ----------------- Test file -----------------</span>\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./transaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./paymentService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> transaction <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./transaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> paymentService <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./paymentService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pay <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./pay\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pay\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should be able to pay with correct amount\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> payment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    paymentService<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myref\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    transaction<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myref\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> pay<span class=\"token punctuation\">.</span><span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myref\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myref\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should be throw when cannot saved\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> payment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    paymentService<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myref\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    transaction<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pay<span class=\"token punctuation\">.</span><span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rejects<span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot save\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>First of all, in Javascript, you don’t always need an object or class to do a simple thing (I will emphasize this later). Second, you can use <code class=\"language-text\">jest.mock</code> to force return value and even implementation of a class or function. This means you don’t need a dependency injection or IoC container to create a testable code.</p>\n<p>While there might be some merit to using IoC and dependency injection anyway, I have seen many JC developers who insist that you can’t write testable code without dependency injection and IoC container. That is not true for many other languages.</p>\n<p>If all you need is testable code, mocking and monkey-patching (like <code class=\"language-text\">jest.mock</code> and <code class=\"language-text\">stub</code>) can be simpler and more direct to achieve the effect. You don’t need to bring the whole IoC container library into the equation.</p>\n<p>In Go, dependency injection in general is still a common way to write a test. However, since Go does not confine you to a class system, dependency injection can be done at a function level. Here is an example from <a href=\"https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/mocking\">gitbook Learn Go with test</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;io&quot;\n)\n\ntype Sleeper interface {\n\tSleep()\n}\n\nconst finalWord = &quot;Go!&quot;\nconst countdownStart = 3\n\nfunc Countdown(out io.Writer, sleeper Sleeper) {\n\tfor i := countdownStart; i &gt; 0; i-- {\n\t\tfmt.Fprintln(out, i)\n\t\tsleeper.Sleep()\n\t}\n\n\tfmt.Fprint(out, finalWord)\n}\n\n// ----------------- Test -------------------\ntype SpySleeper struct {\n\tCalls int\n}\n\nfunc (s *SpySleeper) Sleep() {\n\ts.Calls++\n}\n\nfunc TestCountdown(t *testing.T) {\n\tbuffer := &amp;bytes.Buffer{}\n\tspySleeper := &amp;SpySleeper{}\n\n\tCountdown(buffer, spySleeper)\n\n\tgot := buffer.String()\n\twant := `3\n2\n1\nGo!`\n\n\tif got != want {\n\t\tt.Errorf(&quot;got %q want %q&quot;, got, want)\n\t}\n\n\tif spySleeper.Calls != 3 {\n\t\tt.Errorf(&quot;not enough calls to sleeper, want 3 got %d&quot;, spySleeper.Calls)\n\t}\n}</code></pre></div>\n<p>Notice that the <code class=\"language-text\">SpySleeper</code> is injected directly into the function. You can see that in other languages it isn’t necessary to inject dependency via an object constructor.</p>\n<hr>\n<p>I have demonstrated how you can write unit testable code via different method aside from what you usually do in JC world, a constructor-based dependency injection with IoC container in framework.</p>\n<p>There are many ways to make code testable in other languages. Dependency injection isn’t the only option and even with Go, dependency injection isn’t necessarily about the constructor.</p>\n<p>So the first thing I suggest JC developer unlearn is the fixation toward dependency injection and IoC container. A good code should be testable and it’s true that in JC environment, you should use always use dependency injection to write good code. That’s the only way in JC.</p>\n<p>However, when you start learning other languages, you can write testable code without them.</p>\n<p>When JC developer learn new language, I suggest to stay open-minded about testing approach. I know many were thought that “you must use DI and never instantiate anything directly because you need to be able to test your code”. Again, it is 100% correct for JC but not necessary true in other languages.</p>\n<p>I have a mixed feeling in how many TypeScript framework adopt IoC container approach. I understand it helps JC developer to be at ease with TypeScript, but at the same time I always think it is unnecessary if all you want to do is just write a testable code.</p>\n<p>This <a href=\"https://www.youtube.com/watch?v=PTE4VJIdHPg&#x26;t=650s\">talk</a> also convey a great message on why explicitly using constructor can have benefit over delegated constructor to DI container.</p>\n<p>Stay tuned for part 2: Everything don’t need to be an object.</p>","frontmatter":{"title":"Things Java (and C#) developer should unlearn when start learning new languages (Part 1)","date":"March 11, 2023","description":null}},"previous":{"fields":{"slug":"/security-part-of-solution/"},"frontmatter":{"title":"Dear Security, be a part of the solution"}},"next":{"fields":{"slug":"/enneagram-as-growth-tools/"},"frontmatter":{"title":"Using Enneagram as a growth tool"}}},"pageContext":{"id":"c33c8f4d-5fd1-5bed-8d91-cf087cd441e7","previousPostId":"fe322ee1-85b0-59e7-b65b-ead45cda9398","nextPostId":"9a063bbd-7700-5c7b-8bb8-43f1adfcb804"}},"staticQueryHashes":["1033745147","2841359383"],"slicesMap":{}}