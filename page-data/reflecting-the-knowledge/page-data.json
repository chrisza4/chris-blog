{"componentChunkName":"component---src-templates-blog-post-js","path":"/reflecting-the-knowledge/","result":{"data":{"site":{"siteMetadata":{"title":"Chris' Dialogue"}},"markdownRemark":{"id":"321ce5e8-712c-5759-b93d-21380e29f3b9","excerpt":"Let say you are building an ERP application with a role-based authorization system. Let say we are building this for a company. In this company, we have Jane…","html":"<p>Let say you are building an ERP application with a role-based authorization system.</p>\n<p>Let say we are building this for a company. In this company, we have Jane. Jane is a long-time employee with a lot of influence. What she has to say is pretty important.</p>\n<p>After some sprints passed, she looked into our demonstration, and she wanted to hide a specific menu in the main menu screen, as it is not relevant to her workflow.</p>\n<p>Usually, the system would display a different set of menus for each role. So we considered if we should hide this menu for Jane’s role? In this case, the specific menu is relevant to every employee in Jane’s role, but not Jane (for some reason).</p>\n<p>After a long negotiation, we concluded that we need to work on Jane’s change request.</p>\n<p>Now, we might go with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">==</span> <span class=\"token string\">\"jane@thecompany.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>settingMenus<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But wait, I can see some programmer scream at this line of code. We should not be hardcoding the stuff. It is a bad practice. Sloppy work!</p>\n<hr>\n<p>Now, if we get back to the requirement, what are the options to implement this?</p>\n<p>I can see three options.</p>\n<ol>\n<li>Create a preference system where everyone can configure what they want to see in the main menu</li>\n<li>Make a specific role for Jane and hide the menu according to the role</li>\n<li>Hardcoding</li>\n</ol>\n<p>And let’s evaluate each option:</p>\n<p>The first option seems to be overkill for just one person’s request. It will blow out the budget and timeline.</p>\n<p>In the second option, we create a role to conform to the current structure of the application. We might be able to create <code class=\"language-text\">ACCOUTANT_BUT_FOR_JANE</code>, which is another role. We can copy all the role configuration and permission from <code class=\"language-text\">ACCOUNTANT</code>. But then whenever the requirement for role <code class=\"language-text\">ACCOUNTANT</code> change, we need to make sure that <code class=\"language-text\">ACCOUNTANT_BUT_FOR_JANE</code> will be in sync and does not accidentally show Jane that disgusting menu.</p>\n<p>In the third option, it is simply a bad practice. Any good programmer should not be going around doing things the easy way and hardcoding stuff. They should implement everything in the right way.</p>\n<p>But is it? Is hardcoding is an easy sloppy way to implement this requirement?</p>\n<p>I would argue that since this request is a personal request from Jane herself, the hardcoding would reflect the truth in the most honest way.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">==</span> <span class=\"token string\">\"jane@thecompany.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>settingMenus<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code tells us that we hide this menu just for Jane. We don’t want to hide the menu because it appropriates some kind of new role <code class=\"language-text\">ACCOUNTANT_BUT_NOT_JANE</code> in the company that emerges from business need. It just simply Jane’s needs.</p>\n<p>It is a clear message to developers as well. If two years from now: Jane retired and <code class=\"language-text\">jane@thecompany.com</code> become reserved, this code will be dead, and we can simply remove the code.</p>\n<p>If we follow the unit test practices, we will even have a unit test:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShouldHideComplicatedSettingMenuForJane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So I think that when we code, reflecting the truth and nature of the requirement is way more important than conforming to the structure and “best practices”.</p>\n<p>It’s ok to leave the code but with some comment to explain the context. In this case, we hardcode it because it is Jane’s personal request, and she refuses to work with the system unless we hide the menu. We can put that into the comment.</p>\n<hr>\n<p>Sometimes, we don’t be totally honest with the requirement. We want the code to looks good, looks consistence and have a well-defined structured. That is what good code look like.</p>\n<p>But somtimes, the truth is the requirement and human desired can be messy.</p>\n<p>And from what I see, many times developers (including me) hate this messiness and don’t want to make a code to reflect the messy reality. So we put some fancy stuff and abstraction over it.</p>\n<p>For example, We might disdain the practice of hardcoding to just “Jane” so we might put an abstraction over it to make it seems more likable, more consistent, better structured, etc. That structure can be some role, configuration, or whatsoever.</p>\n<p>I think those abstractions will blur the real truth and nature of the requirement. And make the system even harder to maintain. It reduce the quality of the code by acting as a sophicicated sheet to covered up the actual system requirement.</p>\n<p>I think we should be honest with the requirement. If it is Jane’s personal request, make it clear that it is her personal request. reflect it truthfully no matter how messy it is.</p>\n<p>And the truth shall set you free.</p>","frontmatter":{"title":"Code to reflect of truth","date":"February 03, 2021","description":null}},"previous":{"fields":{"slug":"/rewriting-dillema/"},"frontmatter":{"title":"The software rewrite dilemma"}},"next":{"fields":{"slug":"/the-documentation/"},"frontmatter":{"title":"We don't need \"more documentation\""}}},"pageContext":{"id":"321ce5e8-712c-5759-b93d-21380e29f3b9","previousPostId":"fb9fe751-64a5-52de-992c-9eff2c7bcedc","nextPostId":"c6bbef2e-d4f2-5f40-be87-7899abc5e7f0"}},"staticQueryHashes":["1033745147","2841359383"]}